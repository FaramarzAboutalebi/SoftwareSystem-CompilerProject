EBNF of  tiny PL/0:

program ::= block "." . 

block ::= const-declaration  var-declaration  statement.	

constdeclaration ::= [ “const” ident "=" number {"," ident "=" number} “;"].

var-declaration  ::= [ "var" ident {"," ident} “;"].

statement   ::= [ ident ":=" expression
          | "begin" statement { ";" statement } "end" 
          | "if" condition "then" statement 
    | "while" condition "do" statement
| "read" ident 
    | "write"  expression 
          | empty ] .  
          
condition ::= "odd" expression 
      | expression  rel-op  expression.  
      
rel-op ::= "="|“<>"|"<"|"<="|">"|">=“.

expression ::= [ "+"|"-"] term { ("+"|"-") term}.

term ::= factor {("*"|"/") factor}. 

factor ::= ident | number | "(" expression ")“.

number ::= digit {digit}.

ident ::= letter {letter | digit}.

digit ;;= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9“.

letter ::= "a" | "b" | … | "y" | "z" | "A" | "B" | ... |"Y" | "Z".


..................


typedef enum
{
  oddsym = 1,
  identsym = 2,
  numbersym = 3,
  plussym = 4,
  minussym = 5,
  multsym = 6,
  slashsym = 7,
  ifelsym$8 = 8,
  eqlsym = 9,
  neqsym = 10,
  lessym = 11,
  leqsym = 12,
  gtrsym = 13,
  geqsym = 14,
  lparentsym = 15,
  rparentsym = 16,
  commasym = 17,
  semicolonsym = 18,
  periodsym = 19,
  becomessym = 20,
  beginsym = 21,
  endsym = 22,
  ifsym = 23,
  thensym = 24,
  whilesym = 25,
  dosym = 26,
  callsym$8 = 27,
  constsym = 28,
  varsym = 29,
  procsym$8 = 30,
  writesym = 31,
  readsym = 32,
  elsesym$8 = 33,

} token_type;
